package CoreJava.J_Basic.Constructor;

/**
 * Basics : 
 * 		- Every class, including abstract classes, MUST have a constructor.
 * 		- Constructors can use any access modifier, including private.
 * 		- Constructors must not have a return type, If you see a return type, it's a method rather than a constructor.
 * 			> It's legal (but stupid) to have a method with the same name as the class, but that doesn't make it a constructor.
 * 		
 * 
 * Default-constructor : 
 * 		- If you don't type a constructor into your class code, a default no-arg constructor will be automatically generated by the compiler.
 * 		- If you've typed any other constructor(s)into your class code, the compiler won't provide the no-arg constructor
 * 		 -Every constructor has, as its first statement, 
 * 			# either a call to an overloaded constructor (this()) or 
 * 			# a call to the superclass constructor (super()),
 * 			# But not both
 * 		 -If you do not type in the call to super() or a call to this(), the compiler will insert a no-arg call to super() for you.
 * 		 - This implies a constructor can never have both a call to super() and a call to this().
 *  
 *  	- constructors are never inherited. so never overridden, but they can be overloaded.
 *  
 * 
 * - Abstract classes have constructors, and those constructors are always called when a concrete subclass is instantiated.
 * - Interfaces do not have constructors. Interfaces are not part of an object's inheritance tree.
 * - The only way a constructor can be invoked is from within another constructor. By either super() or this().
 * 
 * It's legal (but stupid) to have a method with the same name as the class, but that doesn't make it a constructor. 
 * 			If you see a return type, it's a method rather than a constructor.
 * 2. it's very common (and desirable) for a class to have a no-arg constructor,
 *  regardless of how many other overloaded constructors are in the class.
 *	Reason  :  If you do not type in the call to super() or a call to this(), the compiler will insert a no-arg call to super().
 * 
 * @author Manish
 *
 */

public class ConstructorBasics { 
	public static void main (String [] args) { 
		// int Parent() is method not constructor.
		// Since constructor is not declared so default one is called. 
		
		Parent parent = new Parent();
	}

}

class Parent { 
	 int Parent(){
		System.out.println("This is not constructor.");
		return 5;
	}
}
