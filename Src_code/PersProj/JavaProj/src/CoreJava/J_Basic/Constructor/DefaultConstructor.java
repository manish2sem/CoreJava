package CoreJava.J_Basic.Constructor;

/**
 * Default-constructor : 
 * 	RULE-1 : If you don't type a constructor into your class code, a default no-arg constructor will be automatically generated by the compiler.
 *		- If you've typed any other constructor(s)into your class code, the compiler won't provide the no-arg constructor
 * 	
 * RULE-2: Every constructor has, as its first statement, 
 * 			> either a call to an overloaded constructor (this()) or 
 * 			> a call to the superclass constructor (super()),
 * 	 2.1 : If you do not type in the call to super() or a call to this(), the compiler will insert a no-arg call to super() for you.
 *      - This implies a constructor can never have both a call to super() and a call to this().
 *  
 */
public class DefaultConstructor {

}

class ParentClass { 
	ParentClass (int x){
		
	}

	//Solution-1 : 
	//ParentClass (){	}


}

class Child extends ParentClass{
	//Issue-1
	// If you don't provide any constructor then following error because of RULE-1:
	// Implicit super constructor is undefined for default constructor. Must define an explicit constructor.

	//Issue-2 
	Child(int x)	{
		//issue because of RULE-2.1
		//This equivalent to calling super(); 
		//and does not find ParentClass () so error.
	}

	//Solution-2 : when parent class is not accessible.
	/*Child()	{
		super(4);
		//This works because of RULE-1.
		
	}*/

}

/**
 * Solution : 
 * it's very common (and desirable in above case) for a class to have a no-arg constructor, 
 * regardless of how many other overloaded constructors are in the class.
 * Reason  :  If you do not type in the call to super() or a call to this(), the compiler will insert a no-arg call to super(). 
 * 
 */

