package Interview.MessageDecoder;

/**
 * JP Morgan 15.02.2014
 * 
 * Message[need to be decoded] has two part 
 * - Header : Used to create key, which is used to decode actual message of body.
 * Key generation logic - AB$ CIUO
 * A->0, B->00, $->01,  (space character)->10, C->000, I->001, U->010, O->011  
 * 
 * so key is generated by adding 1[base 2] on previous key. and first will be 0.
 * for every position all 1 indicates end of segment. Like 1, 11, 111, 1111 etc.
 * 
 * - Body : its a form of bnary digits, with combination of segments.
 * The first 3 digits of each segment represents size of key. 
 * 		010 = size of key is 2.
 * 	segment end when each digit of key is 1.
 *      Ex = 0100110000111. === 010(key size 2) 01 10 00 01 11[end of the segment.]
 *  The body is terminated by 000.
 *  
 *    0100110000111001001011100001110111000
 *    
 *   010:01,10,00,01,11-001:0,0,1-011:100,001,110,111-000
 *   
 *   Carrige return in body must be ignored.
 *   Max key length would be 7 (111).
 *   
 *   Need to do -
 *   Decode the message
 *   Write the logger
 *   Write the Junit
 *   Take input from a.)file, b.)keyboard.
 *   
 *   
 *
 */

public class MainMsgDecoder {

}

/**
 * Challanges :
 *	 Generating key from header. as its, 0, 00, 01, 10, 000, 001 ... in this sequence.
 *	 
 * 
 * */
